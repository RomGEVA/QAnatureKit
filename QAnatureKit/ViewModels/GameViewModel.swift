import Foundation
import SwiftUI

class GameViewModel: ObservableObject {
    @Published var player: Player
    @Published var currentQuestions: [Question] = []
    @Published var currentQuestionIndex: Int = 0
    @Published var score: Int = 0
    @Published var isQuizCompleted: Bool = false
    @Published var showHint: Bool = false
    @Published var remainingTime: Int = 35 // 35 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–µ—Å—å –∫–≤–∏–∑
    @Published var mistakesCount: Int = 0 // –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    @Published var maxMistakes: Int = 3 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
    @Published var disabledOptions: Set<Int> = [] // –î–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ 50/50
    @Published var currentCategory: QuestionCategory = .animals
    @Published var categoryQuizCounts: [QuestionCategory: Int] = [:]
    
    private var timer: Timer?
    private let questionsPerQuiz = 10
    private let quizBonus = 50
    private let totalQuizTime = 35 // 35 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–µ—Å—å –∫–≤–∏–∑
    
    init() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –∏–∑ UserDefaults
        if let data = UserDefaults.standard.data(forKey: "player"),
           let savedPlayer = try? JSONDecoder().decode(Player.self, from: data) {
            self.player = savedPlayer
        } else {
            self.player = Player.default
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for category in QuestionCategory.allCases {
            categoryQuizCounts[category] = 0
        }
        
        loadQuestions()
    }
    
    private func loadQuestions() {
        print("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤...")
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        guard let path = Bundle.main.path(forResource: "questions", ofType: "json") else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É questions.json")
            return
        }
        print("‚úÖ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞–π–¥–µ–Ω: \(path)")
        
        do {
            // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            let data = try Data(contentsOf: URL(fileURLWithPath: path))
            print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: \(data.count) –±–∞–π—Ç")
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
            let decoder = JSONDecoder()
            let questionsContainer = try decoder.decode(QuestionsContainer.self, from: data)
            print("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω")
            print("üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ: \(questionsContainer.questions.count)")
            
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            currentQuestions = Array(questionsContainer.questions.shuffled().prefix(questionsPerQuiz))
            print("üé≤ –í—ã–±—Ä–∞–Ω–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: \(currentQuestions.count)")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: \(error)")
            if let decodingError = error as? DecodingError {
                switch decodingError {
                case .dataCorrupted(let context):
                    print("–î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã: \(context.debugDescription)")
                case .keyNotFound(let key, let context):
                    print("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: \(key.stringValue), \(context.debugDescription)")
                case .typeMismatch(let type, let context):
                    print("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞: \(type), \(context.debugDescription)")
                case .valueNotFound(let type, let context):
                    print("–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: \(type), \(context.debugDescription)")
                @unknown default:
                    print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
                }
            }
        }
    }
    
    func startNewQuiz() {
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫–≤–∏–∑")
        resetQuizState()
        loadQuestions()
        startTimer()
        print("‚è±Ô∏è –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: \(remainingTime) —Å–µ–∫—É–Ω–¥")
    }
    
    func resetQuizState() {
        stopTimer() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        currentQuestionIndex = 0
        score = 0
        isQuizCompleted = false
        showHint = false
        remainingTime = totalQuizTime
        mistakesCount = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        disabledOptions.removeAll()
        currentQuestions = []
    }
    
    func useHint(_ hintType: HintType) {
        guard player.coins >= hintType.cost else { return }
        
        player.coins -= hintType.cost
        savePlayerData()
        
        switch hintType {
        case .skip:
            moveToNextQuestion()
        case .fiftyFifty:
            useFiftyFiftyHint()
        case .highlight:
            showHint = true
        }
    }
    
    private func useFiftyFiftyHint() {
        guard currentQuestionIndex < currentQuestions.count else { return }
        
        let question = currentQuestions[currentQuestionIndex]
        var wrongOptions = Set(0..<question.options.count)
        wrongOptions.remove(question.correctAnswerIndex)
        
        // –í—ã–±–∏—Ä–∞–µ–º –¥–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
        let optionsToDisable = Array(wrongOptions).shuffled().prefix(2)
        disabledOptions = Set(optionsToDisable)
    }
    
    func answerQuestion(_ answerIndex: Int) {
        guard currentQuestionIndex < currentQuestions.count else { return }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω –ª–∏ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π 50/50
        if disabledOptions.contains(answerIndex) {
            return
        }
        
        let question = currentQuestions[currentQuestionIndex]
        if answerIndex == question.correctAnswerIndex {
            score += question.difficulty.reward
        } else {
            mistakesCount += 1
            if mistakesCount >= maxMistakes {
                completeQuiz()
                return
            }
        }
        
        moveToNextQuestion()
    }
    
    private func moveToNextQuestion() {
        if currentQuestionIndex < currentQuestions.count - 1 {
            currentQuestionIndex += 1
            showHint = false
            disabledOptions.removeAll() // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        } else {
            completeQuiz()
        }
    }
    
    private func completeQuiz() {
        stopTimer() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–∏–∑–∞
        isQuizCompleted = true
        player.coins += score + quizBonus
        player.completedQuizzes += 1
        savePlayerData()
        
        checkAchievements()
    }
    
    private func checkAchievements() {
        var achievementsUnlocked = false
        
        // –û–±—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if player.completedQuizzes == 1 {
            if let index = player.achievements.firstIndex(where: { $0.id == "first_quiz" }) {
                if !player.achievements[index].isUnlocked {
                    player.achievements[index].unlock()
                    player.coins += Achievement.firstQuiz.reward
                    achievementsUnlocked = true
                }
            } else {
                var achievement = Achievement.firstQuiz
                achievement.unlock()
                player.achievements.append(achievement)
                player.coins += achievement.reward
                achievementsUnlocked = true
            }
        }
        
        if player.completedQuizzes == 5 {
            if let index = player.achievements.firstIndex(where: { $0.id == "nature_expert" }) {
                if !player.achievements[index].isUnlocked {
                    player.achievements[index].unlock()
                    player.coins += Achievement.natureExpert.reward
                    achievementsUnlocked = true
                }
            } else {
                var achievement = Achievement.natureExpert
                achievement.unlock()
                player.achievements.append(achievement)
                player.coins += achievement.reward
                achievementsUnlocked = true
            }
        }
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let categoryCount = player.getCategoryCount(currentCategory)
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–õ—é–±–∏—Ç–µ–ª—å"
        let loverAchievement: Achievement
        let masterAchievement: Achievement
        switch currentCategory {
        case .animals:
            loverAchievement = Achievement.animalLover
            masterAchievement = Achievement.animalMaster
        case .plants:
            loverAchievement = Achievement.plantLover
            masterAchievement = Achievement.plantMaster
        case .ecology:
            loverAchievement = Achievement.ecoLover
            masterAchievement = Achievement.ecoMaster
        case .water:
            loverAchievement = Achievement.waterLover
            masterAchievement = Achievement.waterMaster
        case .fungi:
            loverAchievement = Achievement.fungiLover
            masterAchievement = Achievement.fungiMaster
        case .birds:
            loverAchievement = Achievement.birdsLover
            masterAchievement = Achievement.birdsMaster
        }
        
        if categoryCount == 1 {
            if let index = player.achievements.firstIndex(where: { $0.id == loverAchievement.id }) {
                if !player.achievements[index].isUnlocked {
                    player.achievements[index].unlock()
                    player.coins += loverAchievement.reward
                    achievementsUnlocked = true
                }
            } else {
                var achievement = loverAchievement
                achievement.unlock()
                player.achievements.append(achievement)
                player.coins += achievement.reward
                achievementsUnlocked = true
            }
        }
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ú–∞—Å—Ç–µ—Ä"
        if categoryCount == 3 {
            if let index = player.achievements.firstIndex(where: { $0.id == masterAchievement.id }) {
                if !player.achievements[index].isUnlocked {
                    player.achievements[index].unlock()
                    player.coins += masterAchievement.reward
                    achievementsUnlocked = true
                }
            } else {
                var achievement = masterAchievement
                achievement.unlock()
                player.achievements.append(achievement)
                player.coins += achievement.reward
                achievementsUnlocked = true
            }
        }
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
        if remainingTime >= 15 { // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 20 —Å–µ–∫—É–Ω–¥
            if let index = player.achievements.firstIndex(where: { $0.id == "speedster" }) {
                if !player.achievements[index].isUnlocked {
                    player.achievements[index].unlock()
                    player.coins += Achievement.speedster.reward
                    achievementsUnlocked = true
                }
            } else {
                var achievement = Achievement.speedster
                achievement.unlock()
                player.achievements.append(achievement)
                player.coins += achievement.reward
                achievementsUnlocked = true
            }
        }
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å
        if mistakesCount == 0 {
            if let index = player.achievements.firstIndex(where: { $0.id == "perfect_score" }) {
                if !player.achievements[index].isUnlocked {
                    player.achievements[index].unlock()
                    player.coins += Achievement.perfectScore.reward
                    achievementsUnlocked = true
                }
            } else {
                var achievement = Achievement.perfectScore
                achievement.unlock()
                player.achievements.append(achievement)
                player.coins += achievement.reward
                achievementsUnlocked = true
            }
        }
        
        if achievementsUnlocked {
            savePlayerData()
            objectWillChange.send()
        }
    }
    
    func startNewQuiz(for category: QuestionCategory) {
        currentCategory = category
        player.incrementCategoryCount(category)
        startNewQuiz()
    }
    
    private func startTimer() {
        stopTimer() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ
        print("‚è±Ô∏è –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞")
        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { [weak self] _ in
            guard let self = self else { return }
            if self.remainingTime > 0 {
                self.remainingTime -= 1
                print("‚è±Ô∏è –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: \(self.remainingTime) —Å–µ–∫—É–Ω–¥")
            } else {
                print("‚è±Ô∏è –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ")
                self.completeQuiz() // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
            }
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –≤ RunLoop –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        RunLoop.current.add(timer!, forMode: .common)
    }
    
    private func stopTimer() {
        print("‚è±Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞")
        timer?.invalidate()
        timer = nil
    }
    
    private func savePlayerData() {
        if let encoded = try? JSONEncoder().encode(player) {
            UserDefaults.standard.set(encoded, forKey: "player")
        }
    }
    
    func resetProgress() {
        player = Player.default
        savePlayerData()
    }
    
    deinit {
        stopTimer() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ ViewModel
    }
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON
struct QuestionsContainer: Codable {
    let questions: [Question]
}

enum HintType {
    case skip
    case fiftyFifty
    case highlight
    
    var cost: Int {
        switch self {
        case .skip: return 30
        case .fiftyFifty: return 20
        case .highlight: return 40
        }
    }
} 
